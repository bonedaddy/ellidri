# ellidri configuration file
#
# All values are optional.  All commented values show the defaults unless
# explicitly noted (e.g. examples).
#
# Defaults are chosen with security and compatibility in mind.  You can safely
# let the optional settings be and only tweak their value when needed.  The only
# exceptions to this rule are "domain", which you probably want to change to
# your real domain name, and "bindings", which you probably want to be set to
# listen on all addresses with your TLS key and certs.
#
# For an example configuration file, see `config_example.yaml`.


# Whether ellidri can be started in an unsafe state.
#
# If you are using ellidri for a server on production, you want to set this to
# false and solve any problem that may arise when starting ellidri.  If you
# configure ellidri in an unsafe manner, it will display an error message and
# quit.  If you want to start ellidri anyway, set this to true; then ellidri
# will display a warning and continue.
#
# Unsafe configurations are configurations that fulfill any of the following:
# - has a plain-text or WebSocket binding on a public IP,
# - has a TLS binding with a self-signed certificate on a public IP,
#
# The definition of configuration unsafety may change over time.
#unsafe: false


# Domain of the IRC server
#
# It is sent through most replies to clients as a prefix, and should be the same
# as the domain name of the server (not the IRC network).
#domain: ellidri.localdomain


# Network bindings
#
# ellidri listens on these for incoming client connections.
#
# By default, ellidri expects plain-text IRC connections on a binding.  If
# you need TLS, add the path to a [PKCS12] archive after the network address.
#
# [PKCS12]: https://en.wikipedia.org/wiki/PKCS_12
#
# With OpenSSL, you can generate one from a certificate chain and a private key
# this way:
# openssl pkcs12 -export -out identity.p12 -inkey key.pem -in cert.pem [-certfile chain_certs.pem]
#
# By default, ellidri only listens to 127.0.0.1:6667 for plain-text connections.
#
# Example:
#bindings:
#  - address: 127.0.0.1:6667
#  - address: 0.0.0.0:6697
#    tls_identity: /etc/ellidri.d/identity.p12


# WebSocket endpoint
#
# To use this, ellidri must have been built with websocket support.
#
# Address and port on which ellidri should listen for WebSocket connections.
# For now no TLS certificate can be set and administrators are expected to proxy
# WebSocket traffic through a reverse-proxy with TLS enabled.
#
# By default, ellidri does not activate the WebSocket endpoint.
#
# Example:
#ws_endpoint: 127.0.0.1:6666


# Informations about the organization running the IRC server
#
# This information should be about the server, not the network.  It is sent to
# clients on demand.
#org_name:     unspecified
#org_location: unspecified
#org_mail:     unspecified


# The mode for new channels
#
# This must not contain mode parameters, for simplicity (e.g.  "+o admin" is
# rejected).  All modes must be known to ellidri.  The list of known modes is:
# - i: users must be invited to join the channel
# - m: only voiced users can talk in the channel
# - n: users must join the channel to send messages to it
# - s: the channel is not be visible to users from the outside
# - t: only channel operators can set its topic
#default_chan_mode: +nt


# The path to the MOTD file
#
# The Message Of The Day is sent to all new clients.  It can be changed at
# runtime with the `REHASH` message.
#motd_file: /etc/motd


# IRC operator credentials
#
# Define here the name/password pairs that are accepted by the `OPER` message.
# For now all oper accounts have the same permissions, therefore it is not
# needed to make multiple of these.
#
# For example:
#opers:
#   - name: root
#     password: A very strong password
#   - name: not-root
#     password: This is not root but weirdly has a stronger password???


# Server password
#
# This password will be needed for clients to be able to log on the server.
# ellidri will expect them to send it in a PASS command.
#
# For example:
#password: My password can't be this cute!


# SASL support
#
# ellidri supports several backends for SASL, each of them implement several
# SASL methods.  The list of backend is the following:
#
# - `none` (default): disable SASL
# - `database`: SQL database backend.  Supports PLAIN.  You must configure
#   the `database` if you choose this backend.
#sasl_backend:  none


# Database URL (required if `sasl_backend` is set to `database`)
#
# Specify the URL to the database ellidri should use for SASL.
# The value must follow the format <driver>://<url>
#
# Supported drivers:
# - sqlite
# - postgres (aliases: psql, postgresql)
#
# For sqlite, the url is the path to the file.  In-memory databases are not supported.
#
# For postgres, the url must follow the key-value format specified at:
# <https://docs.rs/postgres/0.17.0/postgres/config/struct.Config.html>
#
# Examples:
#database:
#    driver: sqlite
#    url: /var/lib/ellidri/ellidri.db
#
#database:
#    driver: postgres
#    url: host=/run/postgresql,localhost database=ellidri sslmode=prefer


# Misc settings


# Number of worker threads
#
# Worker threads handle incoming connections and messages.  When set to 0,
# ellidri uses the number of CPU on the machine.
#workers: 0


# User input limits

# Away message length limit
#awaylen: 300

# Channel name length limit (including '#')
#channellen: 50

# Kick message length limit
#keylen: 24

# Kick message length limit
#kicklen: 300

# Realname length limit
#namelen: 64

# Nickname length limit
#nicklen: 32

# Topic length limit
#topiclen: 300

# Username length limit
#userlen: 64


# Timeouts

# Login/registration timeout
#
# Number of milliseconds until the connection is closed if the client hasn't
# registered.
#login_timeout: 60000
